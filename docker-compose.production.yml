version: '3.1'

services:
  nginx:
    image: nginx:latest
    container_name: Nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.conf.productionTemplate:/etc/nginx/nginx.conf.productionTemplate:ro
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/generate-certs.sh:/etc/nginx/generate-certs.sh
      - ./nginx/startupProduction.sh:/etc/nginx/startupProduction.sh
    environment:
      - HOST_NAME=gsminventory.com
    #entrypoint: /bin/bash -c "chmod +x /etc/nginx/startupProduction.sh && chmod +x /etc/nginx/generate-certs.sh && apt-get update && apt-get install -y dos2unix && dos2unix /etc/nginx/startupProduction.sh && dos2unix /etc/nginx/generate-certs.sh && /etc/nginx/startupProduction.sh"
    entrypoint: /bin/bash -c "chmod +x /etc/nginx/startupProduction.sh && chmod +x /etc/nginx/generate-certs.sh && /etc/nginx/startupProduction.sh"
    depends_on:
      - frontend
      - api

  db:
    image: postgres:latest
    container_name: Postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: GuarantyDatabase
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: Guaranty123
    ports:
      - "5432:5432"
    volumes:
      - mydbdata:/var/lib/postgresql/data
      - ./database/sql:/docker-entrypoint-initdb.d

  api:
    container_name: API
    restart: unless-stopped
    build: 
      context: ./api
      target: production
    environment:
      - DB_HOST=db
      - DB_USER=admin
      - DB_PASSWORD=Guaranty123
      - DB_NAME=GuarantyDatabase
      - API_URL=https://gsminventory.com
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./nginx/ssl:/usr/src/app/ssl
      - uploads:/usr/src/app/uploads
    depends_on:
      - db

  frontend:
    container_name: React
    restart: unless-stopped
    build:
      context: ./FrontEnd/guarantymetalui
      target: production

volumes:
  mydbdata:
  uploads: # Define the uploads volume here
